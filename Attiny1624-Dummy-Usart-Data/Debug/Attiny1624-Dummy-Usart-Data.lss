
Attiny1624-Dummy-Usart-Data.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000001e5  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000019  00008158  00000158  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  000001e5  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000258  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002653  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e20  00000000  00000000  0000295b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074f  00000000  00000000  0000477b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00004ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013f2  00000000  00000000  00004f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a3  00000000  00000000  00006382  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00006425  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  68:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  6c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  70:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  74:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	df e3       	ldi	r29, 0x3F	; 63
  82:	de bf       	out	0x3e, r29	; 62
  84:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  88:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <CLOCK_INHF_clock_init>:
 * - Disables the clock prescaler to achieve full-speed operation.
 * - Waits for the oscillator configuration to stabilize before exiting.
 */
void CLOCK_INHF_clock_init() {
    /* Enable the internal oscillator with a frequency of 20 MHz. */
    ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_OSC20M_gc /*| CLKCTRL_CLKOUT_bm*/); 
  90:	60 e0       	ldi	r22, 0x00	; 0
  92:	80 e6       	ldi	r24, 0x60	; 96
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 a4 00 	call	0x148	; 0x148 <ccp_write_io>
    // For SO14, it is impossible to enable CLKOUT due to the lack of a dedicated pin.

    /* Disable the main clock prescaler for full-speed operation. */
    ccp_write_io((uint8_t *) &CLKCTRL.MCLKCTRLB, CLKCTRL_PDIV_2X_gc & ~CLKCTRL_PEN_bm);
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	81 e6       	ldi	r24, 0x61	; 97
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 a4 00 	call	0x148	; 0x148 <ccp_write_io>

    /* Wait for the oscillator change to complete. */
    while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {};
  a4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__RODATA_PM_OFFSET__+0x7f8063>
  a8:	80 fd       	sbrc	r24, 0
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <CLOCK_INHF_clock_init+0x14>
  ac:	08 95       	ret

000000ae <GPIO_init>:
 * - PB2 as TX for dummy data sending with pull-up enabled.
 * - PB3 as RX (MISO, MT6701 DO) with pull-up enabled.
 * - PA7 as SS (MT6701 CSN) output, initially set high.
 */
void GPIO_init(){
    PORTMUX.USARTROUTEA = PORTMUX_USART0_DEFAULT_gc; ///< Set USART0 to default pins
  ae:	10 92 e2 05 	sts	0x05E2, r1	; 0x8005e2 <__RODATA_PM_OFFSET__+0x7f85e2>

    PORTB.DIRSET = PIN2_bm; ///< Set PB2 as TX for dummy data sending
  b2:	e0 e2       	ldi	r30, 0x20	; 32
  b4:	f4 e0       	ldi	r31, 0x04	; 4
  b6:	84 e0       	ldi	r24, 0x04	; 4
  b8:	81 83       	std	Z+1, r24	; 0x01
    PORTB.PIN2CTRL = PORT_PULLUPEN_bm; ///< Enable pull-up for PB2 (USART0 TX)
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	82 8b       	std	Z+18, r24	; 0x12
  be:	08 95       	ret

000000c0 <main>:
 */ 
#include "Settings.h"

int main(void)
{
    CLOCK_INHF_clock_init(); ///< Initialize system clock
  c0:	0e 94 48 00 	call	0x90	; 0x90 <CLOCK_INHF_clock_init>
    GPIO_init(); ///< Initialize GPIO pins
  c4:	0e 94 57 00 	call	0xae	; 0xae <GPIO_init>
    USART0_init(); ///< Initialize USART0 for SPI communication
  c8:	0e 94 74 00 	call	0xe8	; 0xe8 <USART0_init>

    while (1) 
    {
		//aaaa- elevacijos kampas, bbbb-azimuto kampas, ccc sp-átampa, dd sp-srovë, 0-y min, 0-y max
        USART0_sendString("<aaaa|bbbb|ccc|dd|0|0>\r\n"); //~25 simboliai
  cc:	88 e5       	ldi	r24, 0x58	; 88
  ce:	91 e8       	ldi	r25, 0x81	; 129
  d0:	0e 94 86 00 	call	0x10c	; 0x10c <USART0_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f e7       	ldi	r18, 0x7F	; 127
  d6:	8a e1       	ldi	r24, 0x1A	; 26
  d8:	96 e0       	ldi	r25, 0x06	; 6
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x1a>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x24>
  e4:	00 00       	nop
  e6:	f2 cf       	rjmp	.-28     	; 0xcc <main+0xc>

000000e8 <USART0_init>:
 *  Author: Saulius
 */ 
#include "Settings.h"

void USART0_init() {
    USART0.BAUD = (uint16_t)USART0_BAUD_RATE(500000); ///< Set baud rate to 0.25 Mbps.
  e8:	e0 e0       	ldi	r30, 0x00	; 0
  ea:	f8 e0       	ldi	r31, 0x08	; 8
  ec:	80 e4       	ldi	r24, 0x40	; 64
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	80 87       	std	Z+8, r24	; 0x08
  f2:	91 87       	std	Z+9, r25	; 0x09
    USART0.CTRLB = USART_TXEN_bm | USART_RXMODE_CLK2X_gc; ///< Enable transmitter, double-speed mode.
  f4:	82 e4       	ldi	r24, 0x42	; 66
  f6:	86 83       	std	Z+6, r24	; 0x06
    USART0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc | ///< Configure for asynchronous mode.
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	87 83       	std	Z+7, r24	; 0x07
  fc:	08 95       	ret

000000fe <USART0_sendChar>:
 * This function waits for the USART0 data register to be empty and then transmits the specified character.
 * 
 * @param c The character to be transmitted.
 */
void USART0_sendChar(char c) {
    while (!(USART0.STATUS & USART_DREIF_bm)); ///< Wait for data register to be empty.
  fe:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
 102:	95 ff       	sbrs	r25, 5
 104:	fc cf       	rjmp	.-8      	; 0xfe <USART0_sendChar>
    USART0.TXDATAL = c; ///< Transmit the character.
 106:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
 10a:	08 95       	ret

0000010c <USART0_sendString>:
 * 
 * This function sends a string of characters one by one using the `USART0_sendChar` function.
 * 
 * @param str The string to be transmitted.
 */
void USART0_sendString(char *str) {
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	8c 01       	movw	r16, r24
    for (size_t i = 0; i < strlen(str); i++) {
 116:	c0 e0       	ldi	r28, 0x00	; 0
 118:	d0 e0       	ldi	r29, 0x00	; 0
 11a:	07 c0       	rjmp	.+14     	; 0x12a <USART0_sendString+0x1e>
        USART0_sendChar(str[i]); ///< Send each character of the string.
 11c:	f8 01       	movw	r30, r16
 11e:	ec 0f       	add	r30, r28
 120:	fd 1f       	adc	r31, r29
 122:	80 81       	ld	r24, Z
 124:	0e 94 7f 00 	call	0xfe	; 0xfe <USART0_sendChar>
 * This function sends a string of characters one by one using the `USART0_sendChar` function.
 * 
 * @param str The string to be transmitted.
 */
void USART0_sendString(char *str) {
    for (size_t i = 0; i < strlen(str); i++) {
 128:	21 96       	adiw	r28, 0x01	; 1
 12a:	f8 01       	movw	r30, r16
 12c:	01 90       	ld	r0, Z+
 12e:	00 20       	and	r0, r0
 130:	e9 f7       	brne	.-6      	; 0x12c <USART0_sendString+0x20>
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	e0 1b       	sub	r30, r16
 136:	f1 0b       	sbc	r31, r17
 138:	ce 17       	cp	r28, r30
 13a:	df 07       	cpc	r29, r31
 13c:	78 f3       	brcs	.-34     	; 0x11c <USART0_sendString+0x10>
        USART0_sendChar(str[i]); ///< Send each character of the string.
    }
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	08 95       	ret

00000148 <ccp_write_io>:
 148:	dc 01       	movw	r26, r24
 14a:	28 ed       	ldi	r18, 0xD8	; 216
 14c:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__RODATA_PM_OFFSET__+0x7f8034>
 150:	6c 93       	st	X, r22
 152:	08 95       	ret

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
